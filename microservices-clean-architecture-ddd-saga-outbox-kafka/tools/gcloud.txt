Enable kubernetes

gcloud config set compute/zone europe-west6-a

gcloud container clusters create food-ordering-system-cluster

gcloud container clusters get-credentials food-ordering-system-cluster --zone europe-west6-a --project food-ordering-system-370111

Enable Artifact Registry API

Create repository: food-ordering-system-repository

(If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.)

//gcloud cli
//https://cloud.google.com/sdk/docs/install-sdk
./google-cloud-sdk/install.sh

./google-cloud-sdk/bin/gcloud init

//follow instruction then:
//Your Google Cloud SDK is configured and ready to use!

//pushing-and-pulling
//https://cloud.google.com/container-registry/docs/pushing-and-pulling

cd /Users/jammer/Documents/dev/gcloud
./google-cloud-sdk/bin/gcloud auth login

gcloud auth configure-docker europe-west6-docker.pkg.dev

docker tag com.training.food.order/customer.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/customer.service:1.0-SNAPSHOT

docker tag com.training.food.order/payment.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/payment.service:1.0-SNAPSHOT

docker tag com.training.food.order/restaurant.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/restaurant.service:1.0-SNAPSHOT

docker tag com.training.food.order/order.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/order.service:1.0-SNAPSHOT


//make sure you are logged in.

docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/order.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/payment.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/restaurant.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/customer.service:1.0-SNAPSHOT


//L103
//gcloud console
git clone https://github.com/confluentinc/cp-helm-charts.git

//helm already installed
@cloudshell:~ (food-ordering-system-370111)$ helm version
version.BuildInfo{Version:"v3.9.3",

helm install gke-confluent-kafka cp-helm-charts/ --version 0.6.0

//result:

## Kafka
## ------------------------------------------------------
To connect from a client pod:

1. Deploy a kafka client pod with configuration:

    apiVersion: v1
    kind: Pod
    metadata:
      name: kafka-client
      namespace: default
    spec:
      containers:
      - name: kafka-client
        image: confluentinc/cp-enterprise-kafka:6.1.0
        command:
          - sh
          - -c
          - "exec tail -f /dev/null"

2. Log into the Pod

  kubectl exec -it kafka-client -- /bin/bash

3. Explore with kafka commands:

  # Create the topic
  kafka-topics --zookeeper gke-confluent-kafka-cp-zookeeper-headless:2181 --topic gke-confluent-kafka-topic --create --partitions 1 --replication-factor 1 --if-not-exists

  # Create a message
  MESSAGE="`date -u`"

  # Produce a test message to the topic
  echo "$MESSAGE" | kafka-console-producer --broker-list gke-confluent-kafka-cp-kafka-headless:9092 --topic gke-confluent-kafka-topic

  # Consume a test message from the topic
  kafka-console-consumer --bootstrap-server gke-confluent-kafka-cp-kafka-headless:9092 --topic gke-confluent-kafka-topic --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"

//gke-confluent-kafka-cp-zookeeper-headless:2181
//gke-confluent-kafka-cp-kafka-headless:9092