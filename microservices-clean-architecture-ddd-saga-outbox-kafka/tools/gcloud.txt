Enable kubernetes

gcloud config set compute/zone europe-west6-a

gcloud container clusters create food-ordering-system-cluster

gcloud container clusters get-credentials food-ordering-system-cluster --zone europe-west6-a --project food-ordering-system-370111

Enable Artifact Registry API

Create repository: food-ordering-system-repository

(If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.)

//gcloud cli
//https://cloud.google.com/sdk/docs/install-sdk
./google-cloud-sdk/install.sh

./google-cloud-sdk/bin/gcloud init

//follow instruction then:
//Your Google Cloud SDK is configured and ready to use!

//pushing-and-pulling
//https://cloud.google.com/container-registry/docs/pushing-and-pulling

cd /Users/jammer/Documents/dev/gcloud
./google-cloud-sdk/bin/gcloud auth login

gcloud auth configure-docker europe-west6-docker.pkg.dev

docker tag com.training.food.order/customer.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/customer.service:1.0-SNAPSHOT

docker tag com.training.food.order/payment.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/payment.service:1.0-SNAPSHOT

docker tag com.training.food.order/restaurant.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/restaurant.service:1.0-SNAPSHOT

docker tag com.training.food.order/order.service:1.0-SNAPSHOT europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/order.service:1.0-SNAPSHOT


//make sure you are logged in.

docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/order.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/payment.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/restaurant.service:1.0-SNAPSHOT
docker push europe-west6-docker.pkg.dev/food-ordering-system-370111/food-ordering-system-repository/customer.service:1.0-SNAPSHOT


//L103
//gcloud console
git clone https://github.com/confluentinc/cp-helm-charts.git

//helm already installed
@cloudshell:~ (food-ordering-system-370111)$ helm version
version.BuildInfo{Version:"v3.9.3",

helm install gke-confluent-kafka cp-helm-charts/ --version 0.6.0

//result:

## Kafka
## ------------------------------------------------------
To connect from a client pod:

1. Deploy a kafka client pod with configuration:

    apiVersion: v1
    kind: Pod
    metadata:
      name: kafka-client
      namespace: default
    spec:
      containers:
      - name: kafka-client
        image: confluentinc/cp-enterprise-kafka:6.1.0
        command:
          - sh
          - -c
          - "exec tail -f /dev/null"

2. Log into the Pod

  kubectl exec -it kafka-client -- /bin/bash

3. Explore with kafka commands:

  # Create the topic
  kafka-topics --zookeeper gke-confluent-kafka-cp-zookeeper-headless:2181 --topic gke-confluent-kafka-topic --create --partitions 1 --replication-factor 1 --if-not-exists

  # Create a message
  MESSAGE="`date -u`"

  # Produce a test message to the topic
  echo "$MESSAGE" | kafka-console-producer --broker-list gke-confluent-kafka-cp-kafka-headless:9092 --topic gke-confluent-kafka-topic

  # Consume a test message from the topic
  kafka-console-consumer --bootstrap-server gke-confluent-kafka-cp-kafka-headless:9092 --topic gke-confluent-kafka-topic --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"

//gke-confluent-kafka-cp-zookeeper-headless:2181
//gke-confluent-kafka-cp-kafka-headless:9092

//clone from github repo 

git clone https://github.com/alperarabaci/microservice-trainings.git

//infra files are under subdirectory:
//microservice-trainings/microservices-clean-architecture-ddd-saga-outbox-kafka/food-ordering-infra

kubectl apply -f kafka-client.yml

kubectl cp create-topic.sh kafka-client:/kafka-client-storage

kubectl exec -it kafka-client -- /bin/bash

cd ../..
cd kafka-client-storage/

sh create-topic.sh gke-confluent-kafka-cp-zookeeper-headless

//exit shell
exit

//create postgres pod
kubectl apply -f posgres-deployment.yml

$ kubectl get services
NAME                                        TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)             AGE
postgres-service                            LoadBalancer   10.48.X.X      34.65.82.XXX   5432:31984/TCP      2m36s
order-service                               LoadBalancer   10.48.X.X      34.65.250.XXX   8181:32120/TCP      7m53s
payment-service                             LoadBalancer   10.48.X.X      34.65.28.XXX     8182:32591/TCP      7m53s
postgres-service                            LoadBalancer   10.48.X.X      34.65.82.XXX    5432:31984/TCP      76m
restaurant-service                          LoadBalancer   10.48.X.X      34.65.102.XXX   8183:31219/TCP      7m52s
customer-service                            LoadBalancer   10.48.3.120    34.65.205.XXX   8184:31480/TCP      7m52s

//send request to customer & order service external ip.

curl --location --request POST '34.65.205.XXX:8184/customers' \
--header 'Content-Type: application/json' \
--data-raw '{
    "customerId":"d215b5f8-0249-4dc5-89a3-51fd148cfb41",
    "username": "user_1",
    "firstName": "First",
    "lastName": "User"
}'


curl --location --request POST 'http://34.65.250.XXX:8181/orders' \
--header 'Content-Type: application/json' \
--data-raw '{
  "customerId": "d215b5f8-0249-4dc5-89a3-51fd148cfb41",
  "restaurantId": "d215b5f8-0249-4dc5-89a3-51fd148cfb45",
  "address": {
    "street": "street_1",
    "postalCode": "1000AB",
    "city": "Amsterdam"
  },
  "price": 200.00,
  "items": [
    {
      "productId": "d215b5f8-0249-4dc5-89a3-51fd148cfb48",
      "quantity": 1,
      "price": 50.00,
      "subTotal": 50.00
    },
    {
      "productId": "d215b5f8-0249-4dc5-89a3-51fd148cfb48",
      "quantity": 3,
      "price": 50.00,
      "subTotal": 150.00
    }
  ]
}
'


curl --location --request GET 'http://34.65.250.XXX:8181/orders/8833e5b7-f00b-46c4-bac7-5a125d1e2acd'


//after adding autoscale to application-deployment yaml

(food-ordering-system-370111)$ kubectl get pods

NAME                                                      READY   STATUS    RESTARTS       AGE
order-deployment-798cfc55d8-kvkgn                         1/1     Running   0              25m
order-deployment-798cfc55d8-s2dkh                         1/1     Running   0              14m
payment-deployment-7b5848dd8d-2fs9l                       1/1     Running   0              14m
payment-deployment-7b5848dd8d-m547v                       1/1     Running   0              14m
postgres-deployment-cb56fc764-8ngq2                       1/1     Running   0              5h4m
restaurant-deployment-76d5f7f4c4-7sxmp                    1/1     Running   0              14m
restaurant-deployment-76d5f7f4c4-lwxpm                    1/1     Running   0              14m

(food-ordering-system-370111)$ kubectl get service
NAME                                        TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)             AGE
order-service                               LoadBalancer   10.48.15.45    34.65.205.135   8181:31965/TCP      26m
payment-service                             LoadBalancer   10.48.6.55     34.65.102.152   8182:31571/TCP      16m
postgres-service                            LoadBalancer   10.48.5.3      34.65.82.206    5432:31984/TCP      5h6m
restaurant-service                          LoadBalancer   10.48.3.189    34.65.250.146   8183:31903/TCP      16m

//Kubernetes service can manage load balancing between pods.

//there should be a ingress control integration. 
https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
https://github.com/kubernetes/ingress-gce/blob/master/README.md#readme


//delete objects on gke 

kubectl delete -f application-deployment.yml
kubectl delete -f kafka-client.yml
kubectl delete -f postgres-deployment.yml
helm uninstall gke-confluent-kafka

gcloud container clusters delete food-ordering-system-cluster --zone europe-west6-a